// <auto-generated />
using System;
using TaskBooking.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace TaskBooking.Infrastructure.Migrations
{
    [DbContext(typeof(TaskBookingDbContext))]
    partial class TaskBookingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("Blogseq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("Categoriesseq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("eventseq")
                .IncrementsBy(10);

            modelBuilder.HasSequence("imageseq")
                .IncrementsBy(10);

            modelBuilder.Entity("TaskBooking.Domain.Aggregates.Root.Blog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "Blogseq");

                    b.Property<Guid>("BlogGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BlogGuid")
                        .IsUnique();

                    b.ToTable("Blogs", (string)null);
                });

            modelBuilder.Entity("TaskBooking.Domain.Aggregates.Root.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "Categoriesseq");

                    b.Property<Guid>("CategoryGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("TaskBooking.Domain.Aggregates.Root.EventLogs", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<long>("Id"), "eventseq");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("EventLogs", (string)null);
                });

            modelBuilder.Entity("TaskBooking.Domain.Aggregates.Root.Blog", b =>
                {
                    b.OwnsMany("TaskBooking.Domain.Aggregates.Entities.BlogImage", "Images", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint");

                            SqlServerPropertyBuilderExtensions.UseHiLo(b1.Property<long>("Id"), "imageseq");

                            b1.Property<long>("BlogId")
                                .HasColumnType("bigint");

                            b1.Property<Guid>("BlogImageGuid")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FileName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<bool>("IsDeleted")
                                .HasColumnType("bit");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasMaxLength(150)
                                .HasColumnType("nvarchar(150)");

                            b1.HasKey("Id");

                            b1.HasIndex("BlogId");

                            b1.HasIndex("BlogImageGuid")
                                .IsUnique();

                            b1.ToTable("BlogImage", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BlogId");
                        });

                    b.OwnsOne("TaskBooking.Domain.Aggregates.ValueObjects.UrlHandle", "UrlHandle", b1 =>
                        {
                            b1.Property<long>("BlogId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("BlogId");

                            b1.ToTable("Blogs");

                            b1.WithOwner()
                                .HasForeignKey("BlogId");
                        });

                    b.OwnsOne("TaskBooking.Domain.Aggregates.ValueObjects.Author", "Author", b1 =>
                        {
                            b1.Property<long>("BlogId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Firstname")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.Property<string>("Lastname")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.HasKey("BlogId");

                            b1.ToTable("Blogs");

                            b1.WithOwner()
                                .HasForeignKey("BlogId");
                        });

                    b.OwnsMany("TaskBooking.Domain.Aggregates.ValueObjects.TaskBookingCategory", "CategoryIds", b1 =>
                        {
                            b1.Property<long>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<long>("Id"));

                            b1.Property<long>("BlogId")
                                .HasColumnType("bigint");

                            b1.Property<long>("CategoryId")
                                .HasColumnType("bigint");

                            b1.HasKey("Id");

                            b1.HasIndex("BlogId");

                            b1.HasIndex("CategoryId");

                            b1.ToTable("TaskBookingCategories", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BlogId");

                            b1.HasOne("TaskBooking.Domain.Aggregates.Root.Category", null)
                                .WithMany()
                                .HasForeignKey("CategoryId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();
                        });

                    b.OwnsOne("TaskBooking.Domain.Aggregates.ValueObjects.FeaturedImage", "FeaturedImage", b1 =>
                        {
                            b1.Property<long>("BlogId")
                                .HasColumnType("bigint");

                            b1.Property<string>("AltText")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("nvarchar(100)");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("BlogId");

                            b1.ToTable("Blogs");

                            b1.WithOwner()
                                .HasForeignKey("BlogId");
                        });

                    b.Navigation("Author")
                        .IsRequired();

                    b.Navigation("CategoryIds");

                    b.Navigation("FeaturedImage")
                        .IsRequired();

                    b.Navigation("Images");

                    b.Navigation("UrlHandle")
                        .IsRequired();
                });

            modelBuilder.Entity("TaskBooking.Domain.Aggregates.Root.Category", b =>
                {
                    b.OwnsOne("TaskBooking.Domain.Aggregates.ValueObjects.UrlHandle", "UrlHandle", b1 =>
                        {
                            b1.Property<long>("CategoryId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("nvarchar(200)");

                            b1.HasKey("CategoryId");

                            b1.ToTable("Categories");

                            b1.WithOwner()
                                .HasForeignKey("CategoryId");
                        });

                    b.Navigation("UrlHandle")
                        .IsRequired();
                });

            modelBuilder.Entity("TaskBooking.Domain.Aggregates.Root.EventLogs", b =>
                {
                    b.OwnsOne("TaskBooking.Domain.Aggregates.Enumerations.EventType", "EventType", b1 =>
                        {
                            b1.Property<long>("EventLogsId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Id")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("EventLogsId");

                            b1.ToTable("EventLogs");

                            b1.WithOwner()
                                .HasForeignKey("EventLogsId");
                        });

                    b.Navigation("EventType")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
